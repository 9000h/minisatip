diff -rupN minisatip1/adapter.c minisatip/adapter.c
--- minisatip1/adapter.c	2015-08-23 18:11:51.648162120 +1000
+++ minisatip/adapter.c	2015-08-17 11:35:19.000000000 +1000
@@ -371,6 +371,10 @@ close_adapter_for_stream (int sid, int a
 	}
 	if (a[aid].sid_cnt > 0)
 		a[aid].sid_cnt--;
+#ifndef DISABLE_DVBCSA	
+	if(a[aid].sid_cnt == 0)
+		dvbapi_delete_keys_for_adapter(aid);
+#endif		
 	else mark_pids_deleted(aid, -1, NULL);
 	LOG ("closed adapter %d for stream %d m:%d s:%d", aid, sid,
 		a[aid].master_sid, a[aid].sid_cnt);
@@ -1031,11 +1037,17 @@ void reset_pids_type_for_key(int aid, in
 }
 
 
-int get_enabled_pids(adapter *ad)
+int get_enabled_pids(adapter *ad, int *pids, int lpids)
 {
 	int ep = 0, i;
+	
 	for(i=0; i < MAX_PIDS; i++)
+	{
 		if(ad->pids[i].flags == 1)
-			ep++;
+			pids[ep++] = ad->pids[i].pid;
+		if(ep >= lpids)
+			break;
+	}
+	
 	return ep;
 }
diff -rupN minisatip1/adapter.h minisatip/adapter.h
--- minisatip1/adapter.h	2015-08-23 18:11:51.649162113 +1000
+++ minisatip/adapter.h	2015-08-17 11:33:12.000000000 +1000
@@ -123,6 +123,6 @@ void set_diseqc_adapters(char *o);
 void reset_pids_type(int aid);
 void reset_pids_type_for_key(int aid, int key);
 int delsys_match(adapter *ad, int del_sys);
-int get_enabled_pids(adapter *ad);
+int get_enabled_pids(adapter *ad, int *pids, int lpids);
 #define get_adapter(a) get_adapter1(a, __FILE__, __LINE__)
 #endif							 /*  */
diff -rupN minisatip1/dvbapi.c minisatip/dvbapi.c
--- minisatip1/dvbapi.c	2015-08-23 18:11:51.659162044 +1000
+++ minisatip/dvbapi.c	2015-08-13 18:51:54.000000000 +1000
@@ -458,7 +458,7 @@ int decrypt_stream(adapter *ad,int rlen)
 				if(old_parity != cp)
 				{
 					int ctime = getTick();
-					LOGL(2, "Parity change for key %d, old parity %d, new parity %d pid %d [%02X %02X %02X %02X], last_parity_change %d", k->id, old_parity, cp, pid, b[0], b[1], b[2], b[3], k->last_parity_change);
+					LOGL(2, "Parity change for key %d, new parity %d pid %d [%02X %02X %02X %02X], last_parity_change %d", k->id, cp, pid, b[0], b[1], b[2], b[3], k->last_parity_change);
 //					if(ctime - k->last_parity_change> 1000)
 //						k->key_ok[old_parity] = 0;
 					k->last_parity_change = ctime;
diff -rupN minisatip1/dvb.c minisatip/dvb.c
--- minisatip1/dvb.c	2015-08-23 18:11:51.659162044 +1000
+++ minisatip/dvb.c	2015-08-18 14:52:24.000000000 +1000
@@ -544,10 +544,6 @@ int dvb_tune (int aid, transponder * tp)
 		case SYS_DVBS:
 		case SYS_DVBS2:
 
-			if (tp->sys == SYS_DVBS2 && tp->mtype == 0)
-				tp->mtype = PSK_8;
-			if (tp->sys == SYS_DVBS && tp->mtype == 0)
-				tp->mtype = QPSK;
 			bpol = getTick();
 			if_freq = setup_switch (fd_frontend, tp);
 			if(if_freq < MIN_FRQ_DVBS || if_freq > MAX_FRQ_DVBS)
@@ -576,10 +572,6 @@ int dvb_tune (int aid, transponder * tp)
 			if(tp->freq < MIN_FRQ_DVBT || tp->freq > MAX_FRQ_DVBT)
 				LOG_AND_RETURN(-404, "Frequency %d is not within range ", tp->freq);
 
-			if (tp->sys == SYS_DVBT && tp->mtype == 0)
-				tp->mtype = QAM_AUTO;
-			if (tp->sys == SYS_DVBT2 && tp->mtype == 0)
-				tp->mtype = QAM_AUTO;
 			p = &dvbt_cmdseq;
 			p->props[DELSYS].u.data = tp->sys;
 			p->props[FREQUENCY].u.data = freq * 1000;
@@ -606,8 +598,6 @@ int dvb_tune (int aid, transponder * tp)
 				LOG_AND_RETURN(-404, "Frequency %d is not within range ", tp->freq);
 		
 			p = &dvbc_cmdseq;
-			if(tp->mtype == 0)
-				tp->mtype = QAM_AUTO;
 			p->props[DELSYS].u.data = tp->sys;
 			p->props[FREQUENCY].u.data = freq * 1000;
 			p->props[INVERSION].u.data = tp->inversion;
@@ -830,7 +820,6 @@ detect_dvb_parameters (char *s, transpon
 	tp->sys = -1;
 	tp->freq = -1;
 	tp->inversion = -1;
-	tp->mod = -1;
 	tp->hprate = -1;
 	tp->tmode = -1;
 	tp->gi = -1;
@@ -920,7 +909,7 @@ detect_dvb_parameters (char *s, transpon
 	}
 	
 	if (tp->pids && strncmp (tp->pids, "none", 3) == 0)
-		tp->pids = NULL;
+		tp->pids = "";
 		
 	//      if(!msys)INVALID_URL("no msys= found in URL");
 	//      if(freq<10)INVALID_URL("no freq= found in URL or frequency invalid");
@@ -965,8 +954,6 @@ copy_dvb_parameters (transponder * s, tr
 		d->freq = s->freq;
 	if (s->inversion != -1)
 		d->inversion = s->inversion;
-	if (s->mod != -1)
-		d->mod = s->mod;
 	if (s->hprate != -1)
 		d->hprate = s->hprate;
 	if (s->tmode != -1)
@@ -1010,6 +997,17 @@ copy_dvb_parameters (transponder * s, tr
 	if(d->diseqc < 1) // force position 1 on the diseqc switch
 		d->diseqc = 1;
 
+	if ((d->sys == SYS_DVBS2) && (d->mtype == 0))
+		d->mtype = PSK_8;
+	if ((d->sys == SYS_DVBS) && (d->mtype == 0))
+		d->mtype = QPSK;
+
+	if ((d->sys == SYS_ATSC || d->sys == SYS_DVBC_ANNEX_B) && d->mtype == 0)
+		d->mtype = QAM_AUTO;
+
+	if ((d->sys == SYS_DVBT || d->sys == SYS_DVBT2) && d->mtype == 0)
+		d->mtype = QAM_AUTO;		
+		
 	LOG
 		("copy_dvb_parameters -> src=%d, fe=%d, freq=%d, fec=%d sr=%d, pol=%d, ro=%d, msys=%d, mtype=%d, plts=%d, bw=%d, inv=%d, pids=%s, apids=%s, dpids=%s x_pmt=%s",
 		d->diseqc, d->fe, d->freq, d->fec, d->sr, d->pol, d->ro, d->sys, d->mtype,
diff -rupN minisatip1/dvb.h minisatip/dvb.h
--- minisatip1/dvb.h	2015-08-23 18:11:51.659162044 +1000
+++ minisatip/dvb.h	2015-08-14 21:21:02.000000000 +1000
@@ -60,7 +60,7 @@ typedef struct struct_transponder
 	fe_delivery_system_t sys;
 	int freq;
 	int inversion;
-	int mod;
+	int mtype;
 	int fe;
 
 	// DVB-T
@@ -73,7 +73,6 @@ typedef struct struct_transponder
 
 	// DVB-S2
 	int ro;
-	int mtype;
 	int plts;
 	int fec;
 	int sr;
diff -rupN minisatip1/minisatip.c minisatip/minisatip.c
--- minisatip1/minisatip.c	2015-08-23 18:11:51.660162037 +1000
+++ minisatip/minisatip.c	2015-08-16 23:16:12.000000000 +1000
@@ -221,6 +221,7 @@ set_options (int argc, char *argv[])
 	opts.drop_encrypted = 1;
 	opts.rtsp_port = 554;
 	opts.clean_psi = 0;
+	opts.satip_addpids = 0;
 	opts.output_buffer = 512*1024;
 	opts.satip_servers[0] = 0;
 	memset(opts.playlist, sizeof(opts.playlist), 0);
@@ -576,7 +591,7 @@ read_rtsp (sockets * s)
 		if (strncmp (arg[0], "DESCRIBE", 8) == 0)
 		{
 			char sbuf[1000];
-			char *rv;
+			char *rv = NULL;
 			rv = describe_streams(s, arg[1], sbuf, sizeof(sbuf));
 			if (! rv)
 			{
diff -rupN minisatip1/minisatip.h minisatip/minisatip.h
--- minisatip1/minisatip.h	2015-08-23 18:11:51.660162037 +1000
+++ minisatip/minisatip.h	2015-08-16 23:16:06.000000000 +1000
@@ -52,6 +52,7 @@ struct struct_opts
 	char *dvbapi_host;
 	int drop_encrypted;
 	int rtsp_port;
+	int satip_addpids;
 	char playlist[200];
 	char satip_servers[100];
 };
diff -rupN minisatip1/satipc.c minisatip/satipc.c
--- minisatip1/satipc.c	2015-08-23 18:11:51.660162037 +1000
+++ minisatip/satipc.c	2015-08-18 14:51:12.000000000 +1000
@@ -319,14 +319,14 @@ void get_s2_url(adapter *ad, char *url)
 	int len = 0;
 	transponder * tp = &ad->tp;
 	url[0] = 0;
-	FILL("freq=%d", tp->freq, 0, tp->freq / 1000);
+	FILL("src=%d", tp->diseqc, 0, tp->diseqc);
+	FILL("&fe=%d", ad->satip_fe, 0, ad->satip_fe);
+	FILL("&freq=%d", tp->freq, 0, tp->freq / 1000);
+	FILL("&msys=%s", tp->sys, 0, get_delsys(tp->sys));
+	FILL("&mtype=%s", tp->mtype, -1, get_modulation(tp->mtype));
 	FILL("&pol=%s", tp->pol, -1, get_pol(tp->pol));
 	FILL("&sr=%d", tp->sr, -1, tp->sr / 1000);
 	FILL("&fec=%s", tp->fec, FEC_AUTO, get_fec(tp->fec));
-	FILL("&fe=%d", ad->satip_fe, 0, ad->satip_fe);
-	FILL("&src=%d", tp->diseqc, 0, tp->diseqc);
-	FILL("&mtype=%s", tp->mod, 0, get_modulation(tp->mod));
-	FILL("&msys=%s", tp->sys, 0, get_delsys(tp->sys));
 	if(ad->tp.sys == SYS_DVBS2)	
 	{
 		FILL("&ro=%s", tp->ro, ROLLOFF_AUTO, get_rolloff(tp->ro));
@@ -341,9 +341,11 @@ void get_c2_url(adapter *ad, char *url)
 	int len = 0;
 	transponder * tp = &ad->tp;
 	url[0] = 0;
-	FILL("freq=%.1f", tp->freq, 0, tp->freq / 1000.0);
-	FILL("&fe=%d", ad->satip_fe, 0, ad->satip_fe);
+	FILL("fe=%d", ad->satip_fe, 0, ad->satip_fe);
+	FILL("&freq=%.1f", tp->freq, 0, tp->freq / 1000.0);
 	FILL("&sr=%d", tp->sr, -1, tp->sr / 1000);
+	FILL("&msys=%s", tp->sys, 0, get_delsys(tp->sys));
+	FILL("&mtype=%s", tp->mtype, -1, get_modulation(tp->mtype));
 	FILL("&bw=%d", tp->bw, BANDWIDTH_AUTO, tp->bw/1000000);
 	FILL("&gi=%s", tp->gi, GUARD_INTERVAL_AUTO, get_gi(tp->gi));
 	FILL("&fec=%s", tp->fec, FEC_AUTO, get_fec(tp->fec));
@@ -352,8 +354,6 @@ void get_c2_url(adapter *ad, char *url)
 	FILL("&t2id=%d", tp->t2id, 0, tp->t2id); 
 	FILL("&sm=%d", tp->sm, 0, tp->sm); 
 	FILL("&plp=%d", tp->plp, 0, tp->plp); 	
-	FILL("&mtype=%s", tp->mod, 0, get_modulation(tp->mod));
-	FILL("&msys=%s", tp->sys, 0, get_delsys(tp->sys));
 	sprintf(url+len, "&pids=");
 	return ;
 }
@@ -363,17 +363,17 @@ void get_t2_url(adapter *ad, char *url)
 	int len = 0;
 	transponder * tp = &ad->tp;
 	url[0] = 0;
-	FILL("freq=%.1f", tp->freq, 0, tp->freq / 1000.0);
-	FILL("&fe=%d", ad->satip_fe, 0, ad->satip_fe);
+	FILL("fe=%d", ad->satip_fe, 0, ad->satip_fe);
+	FILL("&freq=%.1f", tp->freq, 0, tp->freq / 1000.0);
 	FILL("&bw=%d", tp->bw, BANDWIDTH_AUTO, tp->bw/1000000);
+	FILL("&msys=%s", tp->sys, 0, get_delsys(tp->sys));
+	FILL("&mtype=%s", tp->mtype, -1, get_modulation(tp->mtype));
 	FILL("&gi=%s", tp->gi, GUARD_INTERVAL_AUTO, get_gi(tp->gi));
 	FILL("&tmode=%s", tp->tmode, TRANSMISSION_MODE_AUTO, get_tmode(tp->tmode));
 	FILL("&specinv=%d", tp->inversion, INVERSION_AUTO, tp->inversion); 
 	FILL("&c2tft=%d", tp->c2tft, 0, tp->c2tft); 
 	FILL("&ds=%d", tp->ds, 0, tp->ds); 
 	FILL("&plp=%d", tp->plp, 0, tp->plp); 	
-	FILL("&mtype=%s", tp->mod, 0, get_modulation(tp->mod));
-	FILL("&msys=%s", tp->sys, 0, get_delsys(tp->sys));
 	sprintf(url+len, "&pids=");
 	return ;
 }
@@ -481,25 +481,35 @@ void satipc_commit(adapter *ad)
 		tune_url(ad, url);
 		len = strlen(url);
 		ad->ignore_packets  = 1; // ignore all the packets until we get 200 from the server
-	} else if(lap[ad->id] > 0)
+	} // url ends in "pids="
+
+	if(!opts.satip_addpids && !ad->want_tune)
+		len += sprintf(url + len, "pids=");
+
+	if(!opts.satip_addpids || ad->want_tune)
 	{
-		int ep = get_enabled_pids(ad);
-		if(ep == lap[ad->id])
-		{
-			ldp[ad->id] = 0;
-			len += sprintf(url + len, "pids=");
-		} else 
-			len += sprintf(url + len, "addpids=");
+		int pids[MAX_PIDS];
+		int i, ep = get_enabled_pids(ad, pids, sizeof(pids));
+		for(i=0; i < ep; i++)
+			len += sprintf(url + len, "%d,", pids[i]);
+		if(ep == 0)
+			len += sprintf(url + len, "none,");
+	}
+		
+
+	if(opts.satip_addpids)
+	{
+		len += sprintf(url + len, "addpids=");
+		for ( i = 0; i < lap[ad->id]; i++)
+			if(apid[ad->id][i]==8192)
+				len += sprintf(url + len, "all,");
+			else 
+				len += sprintf(url + len, "%d,", apid[ad->id][i]);
+		if(len > 0)
+			url[len - 1] = '&';
 	}
-	for ( i = 0; i < lap[ad->id]; i++)
-		if(apid[ad->id][i]==8192)
-			len += sprintf(url + len, "all,");
-		else 
-			len += sprintf(url + len, "%d,", apid[ad->id][i]);
-	if(len > 0)
-		url[len - 1] = '&';		
 	
-	if(!ad->want_tune)
+	if(!ad->want_tune && opts.satip_addpids)
 	{
 		if(ldp[ad->id] > 0)
 			len += sprintf(url + len, "delpids=");
@@ -509,6 +519,8 @@ void satipc_commit(adapter *ad)
 		else 
 			len += sprintf(url + len, "%d,", dpid[ad->id][i]);	
 	}
+	
+	
 	url[len - 1] = 0;
 		
 	http_request(ad, url, NULL);
diff -rupN minisatip1/socketworks.c minisatip/socketworks.c
--- minisatip1/socketworks.c	2015-08-23 18:11:51.661162030 +1000
+++ minisatip/socketworks.c	2015-08-18 14:26:57.000000000 +1000
@@ -140,7 +140,7 @@ udp_bind (char *addr, int port)
 
 	if (bind (sock, (struct sockaddr *) &serv, sizeof (serv)) < 0)
 	{
-		LOGL (0, "udp_bind: failed: bind(): %s", strerror (errno));
+		LOGL (0, "udp_bind: failed: bind() on host %s port %d: error %s", addr, port, strerror (errno));
 		return -1;
 	}
 	LOGL (0, "New UDP socket %d bound to %s:%d", sock, inet_ntoa (serv.sin_addr),
@@ -275,7 +275,7 @@ tcp_listen (char *addr, int port)
 
 	if (bind (sock, (struct sockaddr *) &serv, sizeof (serv)) < 0)
 	{
-		LOGL (0, "tcp_listen: failed: bind(): %s", strerror (errno));
+		LOGL (0, "tcp_listen: failed: bind() on address: %s, port %d : error %s", addr ? addr :"ANY", port, strerror (errno));
 		return -1;
 	}
 	if (listen (sock, 10) < 0)
@@ -521,7 +521,8 @@ select_and_execute ()
 					err = 0;
 					if(rlen<0)
 						err = errno;	
-					ss->rtime = c_time;
+					if(rlen > 0)
+						ss->rtime = c_time;
 					if(read_ok && rlen>0)
 						ss->rlen += rlen;
 					else 
@@ -574,7 +575,7 @@ select_and_execute ()
 //					ss->err = 0;					
 				}
 								 // checking every 60seconds for idle connections - or if select times out
-		if (rv == 0 || c_time - lt > 200)
+		if (rv == 0 || c_time - lt >= 200)
 		{
 			lt = c_time;
 			i = -1;
@@ -761,7 +762,7 @@ void set_socket_send_buffer(int sock, in
 		LOGL(3, "unable to set output UDP buffer size to %d", len);
 	sl = sizeof(int);
 	if(!getsockopt(sock, SOL_SOCKET, SO_SNDBUF, &len, &sl))
-		LOG("output UDP buffer size is %d bytes", len);
+		LOG("output UDP buffer size for socket %d is %d bytes", sock, len);
 
 }
 
